[tool.poetry]
name = "todoist-habitica-sync"
version = "4.0.1"
description = "One way synchronisation from Todoist to Habitica."
authors = ["Radek LÃ¡t <radek.lat@gmail.com>"]
homepage = "https://github.com/radeklat/todoist-habitica-sync"
license = "MIT License"
package-mode = false

[tool.poetry.dependencies]
python = "==3.12.4"
tinydb = "^4.5.2"
ujson = "^5.1.0"
dotmap = "^1.3"
requests = "^2.22"
python-dateutil = "^2.8"
pydantic = "^2.0"
pydantic-settings = "^2.0"

[tool.poetry.group.dev.dependencies]
poetry = "^1.6"
types-toml = "*"
types-requests = "*"
types-python-dateutil = "*"
settings-doc = "^4.3.2"
pytest-dotenv = "^0.5.2"
delfino-core = {extras = ["verify", "dependencies-update"], version = "^9.0"}
toml = "^0.10.2"
delfino-docker = "^4.0"  # https://github.com/radeklat/delfino-docker/blob/main/CHANGELOG.md
ruff = "^0.11.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = "tests/unit tests/integration"
python_functions = "should_*"
junit_family = "xunit2"
# pytest-dotenv settings
env_override_existing_values = 1
env_files = ".env.test"

# Structure: https://docs.pytest.org/en/stable/warnings.html
# Values:    https://docs.python.org/3/library/warnings.html#describing-warning-filters
#            action:message:category:module:line
filterwarnings = [

]

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.mypy]
show_column_numbers = true
show_error_codes = true
color_output = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
follow_imports = "silent"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
# Source code dependencies
module = [
    "delfino.*",
]
ignore_missing_imports = true

[tool.delfino.plugins.delfino-core]

[tool.delfino.plugins.delfino-docker.docker_build]
dockerhub_username = "radeklat"
build_for_platforms = [
    "linux/arm/v7",
    "linux/arm64",
    "linux/amd64",
]

[tool.ruff]
line-length = 120
fix = true


[tool.ruff.lint]
select = [
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle, errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # PEP8-naming
    "PL",  # Pylint
    "UP",  # pyupgrade
    "W",   # pycodestyle, warning
]
ignore = [
    # See https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D1",  # Missing docstrings. We rely on code reviews. Names are often descriptive enough and don't need additional docstring.
    "D401",  # "First line should be in imperative mood"
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D102",  # missing-documentation-for-public-method
]

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.mccabe]
max-complexity = 10
