version: 2.1

orbs:
  gh: circleci/github-cli@1.0.4

parameters:
  project_name:
    type: string
    default: todoist-habitica-sync
  working_directory:
    type: string
    default: ~/todoist-habitica-sync
  python_version:
    type: string
    default: "3.10"
  python_version_full:
    type: string
    default: "3.10.9"
  cache_version:
    type: string
    default: "3"
  git_trunk_branch:
    type: string
    default: "main"
  command_prefix:
    type: string
    default: "poetry run delfino"
  dockerhub_username:
    type: string
    default: "radeklat"

jobs: # A basic unit of work in a run
  test:
    docker:
    - image: cimg/python:<< pipeline.parameters.python_version_full >>
    environment:
      PIPENV_VENV_IN_PROJECT: "true"
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install dev libraries
          command: |
            curl -sSL https://install.python-poetry.org | python3 -
            pip install --upgrade pip
            poetry install --no-ansi --no-root
      - run:
          name: Format check
          command: << pipeline.parameters.command_prefix >> format --check
      - run:
          name: Type check
          command: << pipeline.parameters.command_prefix >> typecheck
      - run:
          name: Linters
          command: << pipeline.parameters.command_prefix >> lint
      - save_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
            - "~/.pyenv/versions/<< pipeline.parameters.python_version_full >>/lib/python<< pipeline.parameters.python_version >>/site-packages"
      - run:
          name: Unit tests
          command: << pipeline.parameters.command_prefix >> test-unit
      - run:
          name: Integration tests
          command: << pipeline.parameters.command_prefix >> test-integration
      - run:
          name: Build coverage report
          command: << pipeline.parameters.command_prefix >> coverage-report
      - run:
          name: Upload coverage reports to Codecov
          command: |
            [[ "${CIRCLE_BRANCH}" == "<< pipeline.parameters.git_trunk_branch >>" ]] && BASE_COMMIT_SHA=$(git rev-parse HEAD~1) || BASE_COMMIT_SHA=$(git merge-base ${CIRCLE_BRANCH} origin/<< pipeline.parameters.git_trunk_branch >>)
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-unit.xml -F total,unit_tests &&
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-integration.xml -F total,integration_tests
      - store_artifacts:
          path: reports/coverage-report
      - store_test_results:
          path: reports
  generate_documentation:
    docker:
      - image: cimg/python:<< pipeline.parameters.python_version_full >>
    environment:
      PIPENV_VENV_IN_PROJECT: "true"
      PYTHONPATH: "src"
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install poetry
          command: curl -sSL https://install.python-poetry.org | python3 -
      - run:
          name: Update README.md
          command: |
            poetry --version
            poetry run \
              settings-doc generate \
                --class config.Settings \
                --output-format markdown \
                --heading-offset 1 \
                --update README.md \
                --between '<!-- settings-doc start -->' '<!-- settings-doc end -->'
      - run:
          name: Update .env.template
          command: |
            poetry run \
              settings-doc generate \
                --class config.Settings \
                --output-format dotenv \
                --update .env.template \
                --between '# Auto-generated content start' '# Auto-generated content end'
      - run:
          name: Check if any changes were made
          command: |
            if [[ -z "$(git status -s README.md .env.template)" ]]; then
              echo "No changes detected. Skipping."
              circleci-agent step halt
            fi
      # See https://circleci.com/docs/2.0/gh-bb-integration/#creating-a-github-deploy-key
      - add_ssh_keys:
          fingerprints:
            - "79:fb:6e:3a:97:35:33:ef:3a:dc:3e:fe:bf:6b:54:3e"
      - run:
          name: Set name and email
          command: |
            git config --local user.email "$(git log -1 --pretty=%ce)"
            git config --local user.name "$(git log -1 --pretty=%cn)"
      - run:
          name: Add changes
          command: git add README.md .env.template
      - run:
          name: Commit changes
          command: git commit -m "Update generated content" -m "[skip ci]"
      - run:
          name: Push changes
          command: git push origin ${CIRCLE_BRANCH}

  build_and_push:
    machine:
      image: ubuntu-2204:current  # https://circleci.com/developer/machine/image/ubuntu-2204
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-docker-build-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install and activate required Python version
          command: |
            export VERSION="<< pipeline.parameters.python_version_full >>"
            if [[ ! -d "/opt/circleci/.pyenv/versions/${VERSION}" ]]; then
              echo "Python ${VERSION} not installed."
            
              if [[ -z "$(pyenv install --list | grep -q ${VERSION})" ]]; then
                echo "Python ${VERSION} not available. Trying a pyenv update ..."            
                cd /opt/circleci/.pyenv/plugins/python-build/../.. && git checkout master && git pull && cd -
              fi
              pyenv install ${VERSION}
            else
              echo "Python ${VERSION} already installed."
            fi
            pyenv global ${VERSION}
      - run:
          name: Install poetry
          command: curl -sSL https://install.python-poetry.org | python3 -
      - run:
          name: Check if build needed
          command: |
            export PATH="/home/circleci/.local/bin:$PATH"
            export DOCKER_CLI_EXPERIMENTAL=enabled
            IMAGE_VERSION="$(poetry version -s)"
            tag_exists="$(docker manifest inspect << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>:$IMAGE_VERSION >/dev/null 2>&1; echo $?)"
            if [[ $tag_exists -eq 0 ]]; then
              echo "Image tag '$IMAGE_VERSION' already exists in the repository. Skipping job."
              circleci-agent step halt
            else
              echo "Image tag '$IMAGE_VERSION' doesn't exist in the repository. Running build."
            fi
      - run:
          name: Install dev libraries
          command: poetry install --no-ansi --no-root
      - save_cache:
          key: << pipeline.parameters.cache_version >>-docker-build-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
            - "/opt/circleci/.pyenv"
      - run:
          name: Create and use a new docker build driver
          command: |
            docker buildx create --use
      - run:
          name: Build and push docker image
          command: << pipeline.parameters.command_prefix >> build-docker --push
  release:
    working_directory: << pipeline.parameters.working_directory >>
    docker:
      - image: cimg/python:<< pipeline.parameters.python_version_full >>
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version_full >>-{{ checksum "poetry.lock" }}
      - gh/setup
      - run:
          name: Install poetry
          command: curl -sSL https://install.python-poetry.org | python3 -
      - run:
          name: Check if current version has been released
          command: |
            VERSION=$(poetry version -s)
            if [[ $(gh release view $VERSION >/dev/null 2>&1; echo $?) -eq 0 ]]; then
              echo "Tag '$VERSION' already exists. Skipping."
              circleci-agent step halt
            fi
      - run:
          name: Create a release
          command: |
            gh release create $(poetry version -s) -F CHANGELOG.md

workflows:
  version: 2
  all_pipelines:
    jobs:
      - test:
          context: << pipeline.parameters.project_name >>
          name: Tests
      - generate_documentation:
          name: Generate documentation
          requires:
            - Tests
      - build_and_push:
          name: Build and push docker image
          context:
            - dockerhub
          requires:
            - Tests
          filters:
            branches:
              only: << pipeline.parameters.git_trunk_branch >>
      - release:
          context:
            - github
          requires:
            - Build and push docker image
          filters:
            branches:
              only: << pipeline.parameters.git_trunk_branch >>
