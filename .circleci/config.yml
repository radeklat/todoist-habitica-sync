version: 2.1

parameters:
  project_name:
    type: string
    default: todoist-habitica-sync
  working_directory:
    type: string
    default: ~/todoist-habitica-sync
  python_version:
    type: string
    default: "3.8"
  cache_version:
    type: string
    default: "1"
  dockerhub_username:
    type: string
    default: "radeklat"

jobs: # A basic unit of work in a run
  test:
    working_directory: << pipeline.parameters.working_directory >>
    docker:
      - image: circleci/python:<< pipeline.parameters.python_version >>
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python<< pipeline.parameters.python_version >>/site-packages
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install dev libraries
          command: pip install --upgrade pip poetry && poetry install --no-ansi
      - run:
          name: Format check
          command: poetry run inv format --check
      - run:
          name: Type check
          command: poetry run inv typecheck
      - run:
          name: Linters
          command: poetry run inv lint
      - save_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python<< pipeline.parameters.python_version >>/site-packages"
      - run:
          name: Unit tests
          command: poetry run inv test-unit
      - run:
          name: Integration tests
          command: poetry run inv test-integration
      - run:
          name: Build coverage report
          command: poetry run inv coverage-report
      - run:
          name: Upload coverage reports to Codecov
          command: |
            [[ "${CIRCLE_BRANCH}" == "master" ]] && BASE_COMMIT_SHA=$(git rev-parse HEAD~1) || BASE_COMMIT_SHA=$(git merge-base ${CIRCLE_BRANCH} origin/master)
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-unit.xml -F total,unit_tests &&
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-integration.xml -F total,integration_tests
      - store_artifacts:
          path: reports/coverage-report
      - store_test_results:
          path: reports
  build_and_push:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: Install dev libraries
          command: pip3 install --upgrade pip poetry
      - run:
          name: Check if build needed
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            IMAGE_VERSION="$(poetry version -s)"
            tag_exists="$(docker manifest inspect << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>:$IMAGE_VERSION >/dev/null 2>&1; echo $?)"
            if [[ $tag_exists -eq 0 ]]; then
              echo "Image tag '$IMAGE_VERSION' already exists in the repository. Skipping job."
              circleci-agent step halt
            else
              echo "Image tag '$IMAGE_VERSION' doesn't exist in the repository. Running build."
            fi
      - run:
          name: Build docker image
          command: |
              docker build \
                --tag << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>:latest \
                --tag << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>:$(poetry version -s) \
                .
      - run:
          name: Login to dockerhub
          command: docker login --username << pipeline.parameters.dockerhub_username >> --password $DOCKERHUB_PERSONAL_ACCESS_TOKEN
      - run:
          name: Push docker image
          command: |
            docker push --all-tags << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>

workflows:
  version: 2
  all_pipelines:
    jobs:
      - test:
          context: todoist-habitica-sync
          name: Tests
      - build_and_push:
          name: Build and push docker image
          context: dockerhub
          requires:
            - Tests
          filters:
            branches:
              only: master
